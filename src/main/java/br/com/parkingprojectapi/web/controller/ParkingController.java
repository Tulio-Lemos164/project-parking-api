package br.com.parkingprojectapi.web.controller;

import br.com.parkingprojectapi.entity.ClientSpace;
import br.com.parkingprojectapi.repository.projection.ClientSpaceProjection;
import br.com.parkingprojectapi.service.ParkingService;
import br.com.parkingprojectapi.web.controller.exceptions.StandardError;
import br.com.parkingprojectapi.web.dto.ClientResponseDTO;
import br.com.parkingprojectapi.web.dto.PageableDTO;
import br.com.parkingprojectapi.web.dto.ParkingInsertDTO;
import br.com.parkingprojectapi.web.dto.ParkingResponseDTO;
import br.com.parkingprojectapi.web.dto.mapper.ClientSpaceMapper;
import br.com.parkingprojectapi.web.dto.mapper.PageableMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.headers.Header;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.net.URI;

@RestController
@RequestMapping("/api/v1/parking-lots")
public class ParkingController {

    @Autowired
    private ParkingService parkingService;

    @Operation(summary = "check in operation", description = "Resource to register a vehicle in the parking lot",
            security = @SecurityRequirement(name = "security"),
            responses = {
                    @ApiResponse(responseCode = "201", description = "Check in done successfully",
                            headers = @Header(name = HttpHeaders.LOCATION, description = "URL to access the created resource"),
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = ParkingResponseDTO.class))),
                    @ApiResponse(responseCode = "404", description = "Either the client's is not registered or there were no empty spaces",
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = StandardError.class))),
                    @ApiResponse(responseCode = "422", description = "Invalid input data, resources not created",
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = StandardError.class))),
                    @ApiResponse(responseCode = "403", description = "Resource not available for CLIENT role",
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = StandardError.class)))
            })
    @PostMapping(value = "/check-in")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<ParkingResponseDTO> checkIn(@RequestBody @Valid ParkingInsertDTO parkingInsertDTO){
        ClientSpace clientSpace = ClientSpaceMapper.toClientSpace(parkingInsertDTO);
        parkingService.checkIn(clientSpace);
        ParkingResponseDTO parkingResponseDTO = ClientSpaceMapper.toDTO(clientSpace);

        URI location = ServletUriComponentsBuilder
                .fromCurrentRequestUri().path("/{receipt}")
                .buildAndExpand(clientSpace.getReceipt())
                .toUri();

        return ResponseEntity.created(location).body(parkingResponseDTO);
    }

    @Operation(summary = "Find a parked vehicle", description = "Resource to return a parked vehicle",
            security = @SecurityRequirement(name = "security"),
            parameters = {
                    @Parameter(in = ParameterIn.PATH, name = "receipt", description = "Receipt number generated by the check-in")
            },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Vehicle found successfully",
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = ParkingResponseDTO.class))),
                    @ApiResponse(responseCode = "404", description = "Receipt number not found or check out has already happen",
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = StandardError.class)))
            })
    @GetMapping(value = "/check-in/{receipt}")
    @PreAuthorize("hasAnyRole('ADMIN', 'CLIENT')")
    public ResponseEntity<ParkingResponseDTO> findByReceipt(@PathVariable String receipt){
        ClientSpace clientSpace = parkingService.findByReceipt(receipt);
        ParkingResponseDTO parkingResponseDTO = ClientSpaceMapper.toDTO(clientSpace);
        return ResponseEntity.ok().body(parkingResponseDTO);
    }

    @Operation(summary = "Find a parked vehicle", description = "Resource to return a parked vehicle",
            security = @SecurityRequirement(name = "security"),
            parameters = {
                    @Parameter(in = ParameterIn.PATH, name = "receipt", description = "Receipt number generated by the check-in")
            },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Check out done!",
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = ParkingResponseDTO.class))),
                    @ApiResponse(responseCode = "404", description = "Receipt number not found or check out has already happen",
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = StandardError.class))),
                    @ApiResponse(responseCode = "403", description = "Resource not available for CLIENT role",
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = StandardError.class)))
            })
    @PutMapping(value = "/check-out/{receipt}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<ParkingResponseDTO> checkOut(@PathVariable String receipt){
        ClientSpace clientSpace = parkingService.checkOut(receipt);
        ParkingResponseDTO parkingResponseDTO = ClientSpaceMapper.toDTO(clientSpace);
        return ResponseEntity.ok().body(parkingResponseDTO);
    }

    @Operation(summary = "Return all registered parking lots of one client", description = "Access fully restricted to ADMIN",
            security = @SecurityRequirement(name = "security"),
            parameters = {
                    @Parameter(in = ParameterIn.QUERY, name = "cpf",
                            description = "Cpf number of the client being searched",
                            required = true),
                    @Parameter(in = ParameterIn.QUERY, name = "page",
                            content = @Content(schema = @Schema(type = "integer", defaultValue = "0")),
                            description = "Represents the page being returned"),
                    @Parameter(in = ParameterIn.QUERY, name = "size",
                            content = @Content(schema = @Schema(type = "integer", defaultValue = "5")),
                            description = "Represents the total quantity of elements on a page"),
                    @Parameter(in = ParameterIn.QUERY, name = "sort", hidden = true,
                            content = @Content(schema = @Schema(type = "string", defaultValue = "id,asc")),
                            description = "Represents the ordering of results. Multiple sort parameters are supported"),
            },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Parking data retrieved successfully",
                            content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ClientResponseDTO.class)))),
                    @ApiResponse(responseCode = "403", description = "user without permission to access this resource",
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = StandardError.class)))
            })
    @GetMapping(value = "/cpf/{cpf}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<PageableDTO> findAllParkingByCpf(@PathVariable String cpf, @PageableDefault(size = 5, sort = "entryDate", direction = Sort.Direction.ASC)Pageable pageable){
        Page<ClientSpaceProjection> projection = parkingService.findAllByClientCpf(cpf, pageable);
        PageableDTO pageableDTO = PageableMapper.toDto(projection);
        return ResponseEntity.ok().body(pageableDTO);
    }
}
